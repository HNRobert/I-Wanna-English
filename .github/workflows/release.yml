name: Release

on:
  push:
    tags:
      - '*.*.*'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      release_notes: ${{ steps.release_notes.outputs.NOTES }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Get version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Generate Release Notes
        id: release_notes
        run: |
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s" --no-merges)
            COMPARE_LINK="https://github.com/${{ github.repository }}/commits/${CURRENT_TAG}"
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s" --no-merges)
            COMPARE_LINK="https://github.com/${{ github.repository }}/compare/${LAST_TAG}...${CURRENT_TAG}"
          fi
          
          echo "NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "## Release ${CURRENT_TAG}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "Changes in this release:" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "---" >> $GITHUB_OUTPUT
          echo "See full changelogs: [${LAST_TAG}...${CURRENT_TAG}](${COMPARE_LINK})" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  build-and-release:
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Install vsce
        run: npm install -g vsce

      - name: Build the extension
        run: npm run compile

      - name: Determine if prerelease
        id: prerelease
        run: echo "::set-output name=prerelease::$(if [[ ${{ github.ref }} == *beta* ]]; then echo true; else echo false; fi)"

      - name: Extract tag name
        id: extract_tag
        run: echo "::set-output name=tag::${GITHUB_REF#refs/tags/}"

      - name: Package the extension
        run: |
          if [[ ${{ steps.prerelease.outputs.prerelease }} == 'true' ]]; then
            vsce package --pre-release -o i-wanna-english-${{ steps.extract_tag.outputs.tag }}.vsix
          else
            vsce package -o i-wanna-english-${{ steps.extract_tag.outputs.tag }}.vsix
          fi

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: i-wanna-english-${{ steps.extract_tag.outputs.tag }}.vsix
          draft: false
          prerelease: ${{ steps.prerelease.outputs.prerelease }}
          generate_release_notes: false
          body: ${{ needs.setup.outputs.release_notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to VSCode Marketplace
        run: |
          if [[ ${{ steps.prerelease.outputs.prerelease }} == 'true' ]]; then
            vsce publish --pre-release -p ${{ secrets.VSCE_PAT }}
          else
            vsce publish -p ${{ secrets.VSCE_PAT }}
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.VSCE_PAT }}
